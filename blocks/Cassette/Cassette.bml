Beast.decl({
    Cassette: {
        domInit: function fn() {
            // Cassette pieces scroll detection for fixed positioning
            const cassettePieces = []
            let atLastPiece = false
            
            // Get all cassette pieces
            for (let i = 1; i <= 5; i++) {
                const piece = document.querySelector(`.Cassette_piece_${i}`)
                if (piece) {
                    cassettePieces.push({
                        element: piece,
                        index: i,
                        isFixed: false,
                        triggerPoint: piece.getBoundingClientRect().top + window.scrollY
                    })
    
                }
            }
            
            if (cassettePieces.length > 0) {
    
                
                // Throttled scroll handler for better performance
                let ticking = false
                function throttledCheckCassettePositions() {
                    if (!ticking) {
                        requestAnimationFrame(() => {
                            checkCassettePositions()
                            ticking = false
                        })
                        ticking = true
                    }
                }
                
                function checkCassettePositions() {
                    const scrollY = window.scrollY
                    
                    // Check if we've reached the last piece (piece 5)
                    const lastPiece = cassettePieces[cassettePieces.length - 1]
                    const reachedLastPiece = scrollY >= lastPiece.triggerPoint - 100
                    
                    if (reachedLastPiece && !atLastPiece) {
                        // All pieces should lose their fixed position and move together
                        atLastPiece = true
                        cassettePieces.forEach(piece => {
                            if (piece.isFixed) {
                                piece.element.classList.remove('Cassette_fixed')
                                piece.isFixed = false
                            }
                        })
                        return // Exit early when at last piece
                    }
                    
                    if (!reachedLastPiece && atLastPiece) {
                        // Reset flag when not at last piece
                        atLastPiece = false
                    }
                    
                    // Only process individual pieces when not at last piece
                    if (!atLastPiece) {
                        cassettePieces.forEach(piece => {
                            const shouldBeFixed = scrollY >= piece.triggerPoint - 100
                            
                            if (shouldBeFixed && !piece.isFixed) {
                                piece.element.classList.add('Cassette_fixed')
                                piece.isFixed = true
                            } else if (!shouldBeFixed && piece.isFixed) {
                                piece.element.classList.remove('Cassette_fixed')
                                piece.isFixed = false
                            }
                        })
                    }
                }
                
                // Add scroll event listener with throttling for better performance
                window.addEventListener('scroll', throttledCheckCassettePositions, { passive: true })
                
                // Add resize listener to recalculate trigger points
                window.addEventListener('resize', () => {
                    // Recalculate trigger points after resize
                    cassettePieces.forEach(piece => {
                        piece.triggerPoint = piece.element.getBoundingClientRect().top + window.scrollY
                    })
                    // Force a check after resize
                    checkCassettePositions()
                })
                
                // Cleanup function to reset all pieces
                function resetAllCassettePieces() {
                    cassettePieces.forEach(piece => {
                        piece.element.classList.remove('Cassette_fixed')
                        piece.isFixed = false
                        piece.element.style.transform = ''
                    })
                    atLastPiece = false
        
                }
                
                // Expose reset function globally for debugging
                window.resetCassettePieces = resetAllCassettePieces
                
                // Initial check
                checkCassettePositions()
    
            } else {

            }
        }       
    }
})