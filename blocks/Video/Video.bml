Beast.decl({
    Video: {
        state: function () {
            return {
                items: []
            }
        },
        requestApi: function (path, data) {
            
        },
        expand: function () {

            if (this.mod("Auto")) {
                this.append(
                    <video>{this.text()}</video>
                )
                
            } else {
                this.append(
                    <title>{this.param('title')}</title>,
                    <action><Button hint="00:00" icon="Play">Watch </Button></action>,
                    <duration/>,
                    <video poster="{this.param('poster')}">{this.text()}</video>
                )
            }
            
        },
        domInit: function fn() {
            // Check if the video element has 'controls_hide' class
            var videoContainer = this.domNode();
            if (videoContainer.classList.contains('video_controls_hide')) {
                // If 'controls_hide' class is present, do not execute the rest of the code
                return;
            }

            var videoElement = videoContainer.querySelector('video');
            videoElement.controls = false; // Initially hide controls

            var actionElement = videoContainer.querySelector('.video__action');
            var titleElement = videoContainer.querySelector('.video__title'); // Assuming your title class is 'video__title'
            var durationElement = videoContainer.querySelector('.Video__duration');

            // Action button click event
            actionElement.addEventListener('click', function() {
                videoElement.play();
                videoElement.controls = true; // Show video controls when playing
                actionElement.style.display = 'none'; // Hide the action element
                titleElement.style.display = 'none'; // Hide the title element
                durationElement.style.display = 'none'; // Hide the duration element
            });

            // Pause event - if you want to re-show the elements when video is paused
            videoElement.addEventListener('pause', function() {
                videoElement.controls = false; // Hide controls when paused
                actionElement.style.display = 'block'; // Show action element
                titleElement.style.display = 'block'; // Show title element
                durationElement.style.display = 'block'; // Show the duration element
            });

            // Ended event - for when the video ends
            videoElement.addEventListener('ended', function() {
                videoElement.controls = false; // Hide controls when the video ends
                actionElement.style.display = 'block'; // Show action element
                titleElement.style.display = 'block'; // Show title element
                durationElement.style.display = 'block'; // Show the duration element
            });

            // Loaded metadata event to get and display video duration
            videoElement.addEventListener('loadedmetadata', function() {
                var videoDuration = videoElement.duration;
                var minutes = Math.floor(videoDuration / 60);
                var seconds = Math.floor(videoDuration % 60);
                var formattedDuration = minutes + ":" + (seconds < 10 ? '0' : '') + seconds;

                durationElement.innerHTML = formattedDuration; // Set the formatted duration
            });
        }

    },
    
    Video__video: {
        tag:'video',
        expand: function () {  
            this.domAttr('id', 'video')
            this.domAttr('controls', 'true')
            this.domAttr('poster', this.param('poster'))
            this.append(
                <source source="{this.text()}"/>
            )
        }
    },
    Video__source: {
        tag:'source',
        expand: function () {
            this.domAttr('src', this.param('source'))
            this.domAttr('type', 'video/mp4')      
        }
    } 
})