Beast.decl({
    Case: {
        expand: function () {
            this.append(
                <head>
                    <client-card>
                        <tail />
                        <wrap>
                            <hint>Client</hint>
                            {this.get('client')}
                        </wrap>
                    </client-card>
                    {this.get('title')}
                </head>,


                this.get('impact', 'image', 'descr'),

                <descr>
                    
                    <descr-about>
                        <Header>
                            <title>About<br/> the project</title>
                            <glyph>„Éó„É≠„Ç∏„Çß„ÇØ„Éà</glyph>
                        </Header>
                        {this.get('description')}
                    </descr-about>

                    <descr-plus>
                        <descr-icon/>
                    </descr-plus>

                    <descr-challenge>
                        <Header>
                            <title>The<br/> challenge</title>
                            <glyph>ÊåëÊà¶</glyph>
                        </Header>
                        <Box Type="Challenge">
                            <title>ID.5.001</title>
                            <text Size="L">
                                {this.get('challenge')}
                            </text>    
                        </Box>
                        
                    </descr-challenge>
                    
                </descr>,

                this.get('solution'),

                <impact-bottom>
                    <Header>
                        <title>Impact of<br/> our work</title>
                        <glyph>„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´„Å§„ÅÑ„Å¶</glyph>
                    </Header>
                    <impact-items>
                        {this.get('impact-meta-item')}
                    </impact-items>
                </impact-bottom>,

                this.get('review', 'link'),

                
            )
        },
        domInit: function fn() {
            // Mobile layout adjustment: move Header before CaseResult on mobile
            if (MissEvent.mobile) {
                // Find the case__impact container
                const caseImpact = document.querySelector('.case__impact')
                if (caseImpact) {
                    // Find the Header and CaseResult elements within case__impact
                    const header = caseImpact.querySelector('.Header')
                    const caseResult = caseImpact.querySelector('.CaseResult')
                    
                    if (header && caseResult) {
                        // Move the Header to appear before CaseResult
                        caseResult.parentNode.insertBefore(header, caseResult)
                        console.log('Moved Header before CaseResult on mobile')
                    }
                }
                
                // Add header__line div before Case__impact on mobile
                const caseImpactElement = document.querySelector('.case__impact')
                if (caseImpactElement) {
                    // Create header__line div
                    const headerLine = document.createElement('div')
                    headerLine.className = 'header__line'
                    
                    // Insert header__line before case__impact
                    caseImpactElement.parentNode.insertBefore(headerLine, caseImpactElement)
                    console.log('Added header__line before Case__impact on mobile')
                }
            }
            
            // Initialize all Case scroll effects and animations using the generic ScrollFade helper
            if (typeof ScrollFade !== 'undefined') {
                const caseEffects = ScrollFade.initScrollEffects({
                    animations: [
                        {
                            selector: '.Case__client-card',
                            className: 'Case__client-card_loaded',
                            delay: 300
                        },
                        {
                            selector: '.Case__title',
                            className: 'Case__title_loaded',
                            delay: 300,
                            offset: 200
                        },
                        {
                            selector: '.CaseMeta__item',
                            className: 'CaseMeta__item_loaded',
                            delay: 200,
                            offset: 200
                        },
                        {
                            selector: '.Caseresult__item',
                            className: 'Caseresult__item_loaded',
                            delay: 100,
                            offset: 200
                        }
                    ],
                    textShuffle: [
                        {
                            selector: '.caseresult__title, .caseresult__text',
                            afterSelector: '.Caseresult__item',
                            options: {
                                letterDelay: 30,
                                maxRolls: 15,
                                rollInterval: 50
                            },
                            offset: 100
                        }
                    ],
                    parallax: {
                        groups: [
                            {
                                selector: '.Case__head',
                                speed: 0.7,
                                blur: true,
                                movement: true,
                                blurTrigger: 0.20,
                                blurStart: 0.15,
                                mobileBlurTrigger: 1.3,
                                mobileBlurStart: 1.3,
                                maxBlur: 8
                            },
                            {
                                selector: '.CaseMeta',
                                speed: 0.8,
                                blur: true,
                                movement: true,
                                blurTrigger: 0.20,
                                blurStart: 0.15,
                                mobileBlurTrigger: 0.95,
                                mobileBlurStart: 0.90,
                                maxBlur: 8
                            },
                            {
                                selector: '.Case__image, .case__descr',
                                blur: true,
                                movement: false,
                                blurTrigger: 0.20,
                                blurStart: 0.15,
                                mobileBlurTrigger: 0.95,
                                mobileBlurStart: 0.90,
                                maxBlur: 8
                            }
                        ]
                    },
                    observers: [
                        {
                            selector: '.Case__head, .CaseMeta, .case__descr, .Case__image',
                            rootMargin: '-20% 0px -20% 0px',
                            threshold: 0.3,
                            onIntersect: function(element, entry) {
                                console.log(`üéØ Element intersected: ${element.className}`)
                                // Add a class to make the element visible
                                element.classList.add('visible')
                            }
                        }
                    ]
                })
                
                // Store reference for cleanup if needed
                this.caseEffects = caseEffects
                
                console.log('Case scroll effects initialized successfully using ScrollFade helper')
            } else {
                console.warn('ScrollFade helper not found. Make sure scrollfade.js is loaded.')
            }
        }       
    },

    Case__link: {
        expand: function () {
            var text = this.text()
            var href = 'http://' + text
            this.append(
                <action>
                    <Link New href="{href}">
                        <Action Size="L" Wide  Type="Red">{text}</Action>
                    </Link>
                </action>
            )
        },
    },

    Case__impact: {
        expand: function () {
            this.append(
                <Header Top>
                    <title>Impact of<br/> our work</title>
                    <glyph>„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´„Å§„ÅÑ„Å¶</glyph>
                </Header>,

                <CaseMeta>
                    {this.get('item')}
                </CaseMeta>
            )
        },
    },

    Case__solution: {
        expand: function () {
            this.append(
                <Header>
                    <title>The<br/> solution</title>
                    <glyph>Ëß£Ê±∫Á≠ñ</glyph>
                </Header>,
                <Solution>
                    {this.get('item','descr')}
                </Solution>
            )
        },
    },

    Case__review: {
        expand: function () {
            this.append(
                <Header>
                    <title>Client<br/> feedback</title>
                    <glyph>‰∫∫„ÄÖ„ÅåË®Ä„ÅÜ„Åì„Å®</glyph>
                </Header>,
                <Review Size="L">
                    {this.get('text')}
                    <person>
                        {this.get('photo', 'name')}
                    </person>
                </Review> 
                
            )
        },
            
    },

    Case__image: {
        
        expand: function () {
            this.css({
                backgroundImage: 'url('+ this.param('src') +')'
            })
        },
            
    },

    

    

    'Case__impact-meta-item': {
        
        expand: function () {
            this.append(
                <CaseResult>
                    <item>
                        <title>{this.get('impact-meta-title')}</title>
                        <text>{this.get('impact-meta-text')}</text>
                    </item>
                </CaseResult>
            )
        }
            
    },
})