Beast.decl({
    Process: {
        expand: function () {
            
        },
        domInit: function fn() {
            // Check if mobile - disable animations on mobile for now
            const isMobile = window.innerWidth <= 768
            if (isMobile) {
                return // Exit early on mobile, no animations
            }
            
            // Process step background image fade-in animation
            
            // Configuration object for easy editing of timing values
            const config = {
                // Desktop timing values
                desktop: {
                    triggerPoint: 0.5,        // When first step starts fading (50% of viewport)
                    fadeDistance: 0.3,        // Fade over 30% of viewport height
                    glowTriggerZone: 0.6      // Glow when title is within 60% of viewport
                },
                // Mobile timing values
                mobile: {
                    triggerPoint: 0.3,        // When first step starts fading (70% of viewport)
                    fadeDistance: 0.1,        // Fade over 40% of viewport height
                    glowTriggerZone: 0.3      // Glow when title is within 80% of viewport
                },
                // Mobile breakpoint
                mobileBreakpoint: 768
            }
            
            // Wait for DOM to be fully loaded
            setTimeout(() => {
                const processSteps = document.querySelectorAll('.Process__step')
                
                // Initialize all process steps with opacity 0 for background images
                processSteps.forEach(step => {
                    step.style.position = 'relative'
                    step.style.setProperty('--bg-opacity', '0')
                })
                
                let fadeAnimationTriggered = false
                
                if (processSteps.length > 0) {
                    // Get all process titles for glow effect
                    const processTitles = document.querySelectorAll('.Process__title')
                    
                    // Check if mobile
                    const isMobile = window.innerWidth <= config.mobileBreakpoint
                    
                    function updateProcessAnimations() {
                        const scrollTop = window.pageYOffset || document.documentElement.scrollTop
                        const windowHeight = window.innerHeight
                        
                        // Get timing values based on device
                        const timing = isMobile ? config.mobile : config.desktop
                        const triggerPoint = windowHeight * timing.triggerPoint
                        const fadeDistance = windowHeight * timing.fadeDistance
                        const glowTriggerZone = windowHeight * timing.glowTriggerZone
                        
                        // Check if first process step is in trigger range
                        const firstStep = processSteps[0]
                        if (firstStep) {
                            const stepRect = firstStep.getBoundingClientRect()
                            const stepTop = stepRect.top
                            
                            if (stepTop <= triggerPoint && stepTop > triggerPoint - fadeDistance) {
                                // First step is in fade-in range - apply to all steps
                                const progress = 1 - ((stepTop - (triggerPoint - fadeDistance)) / fadeDistance)
                                const opacity = Math.max(0, Math.min(1, progress))
                                
                                processSteps.forEach(step => {
                                    step.style.setProperty('--bg-opacity', opacity.toString())
                                })
                                
                            } else if (stepTop <= triggerPoint - fadeDistance) {
                                // First step is fully visible - all backgrounds fully visible
                                processSteps.forEach(step => {
                                    step.style.setProperty('--bg-opacity', '1')
                                })
                            } else {
                                // First step hasn't entered fade range yet - all backgrounds hidden
                                processSteps.forEach(step => {
                                    step.style.setProperty('--bg-opacity', '0')
                                })
                            }
                        }
                        
                        // Check each process title for glow effect and track active step
                        let activeStepIndex = -1
                        
                        processTitles.forEach((title, index) => {
                            const rect = title.getBoundingClientRect()
                            const titleCenter = rect.top + rect.height / 2
                            const viewportCenter = windowHeight / 2
                            
                            // Calculate distance from viewport center
                            const distanceFromCenter = Math.abs(titleCenter - viewportCenter)
                            const maxDistance = glowTriggerZone / 2
                            
                            if (distanceFromCenter <= maxDistance) {
                                // Title is in glow zone - add glow class
                                title.classList.add('Process__title_glow')
                                activeStepIndex = index
                                
                                // Also make the corresponding process text fully visible
                                const processStep = title.closest('.Process__step')
                                if (processStep) {
                                    const processText = processStep.querySelector('.Process__text')
                                    if (processText) {
                                        processText.style.opacity = '1'
                                    }
                                }
                            } else {
                                // Title is out of glow zone - remove glow class
                                title.classList.remove('Process__title_glow')
                                
                                // Reset process text opacity to default
                                const processStep = title.closest('.Process__step')
                                if (processStep) {
                                    const processText = processStep.querySelector('.Process__text')
                                    if (processText) {
                                        processText.style.opacity = ''
                                    }
                                }
                            }
                        })
                        
                        // Fade previous steps based on active step
                        processSteps.forEach((step, index) => {
                            if (activeStepIndex >= 0 && index < activeStepIndex) {
                                // This is a previous step - fade it out
                                step.classList.add('Process__step_faded')
                            } else {
                                // This is current or future step - remove fade
                                step.classList.remove('Process__step_faded')
                            }
                        })
                    }
                    
                    // Add scroll event listener for process animations
                    window.addEventListener('scroll', updateProcessAnimations)
                    
                    // Initial call
                    updateProcessAnimations()
                    
                    // Store cleanup function for potential use
                    this.cleanupProcessAnimations = function() {
                        window.removeEventListener('scroll', updateProcessAnimations)
                    }
                }
            }, 1000) // Wait 1 second for DOM to be ready
        }       
    }
})