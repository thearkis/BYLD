Beast.decl({
    Intro: {
        state: function () {
            return {
                items: []
            }
        },
        requestApi: function (path, data) {
            
        },
        expand: function () {
            this.append(
                this.get('video', 'image'),
                <content>{this.get('logo', 'title', 'subtitle')}</content>,
                this.get('headline'),
                <footer><Button hint="00:00" icon="Play">Watch </Button></footer>
            )
        },
        domInit: function fn() {
            var films = document.querySelectorAll('.intro__video');
            var videos = Array.from(films);
            var progressBars = [];
            var footer = document.querySelector('.Intro__footer')
            
            // Create progress bars and setup initial state for each video
            videos.forEach(function(video, index) {
                var progressBar = document.createElement('div');
                progressBar.className = 'progress-bar';
                video.parentNode.insertBefore(progressBar, video.nextSibling);
                progressBars.push(progressBar);
                video.style.display = (index === 0) ? 'block' : 'none'; // Only the first video is visible initially
            });

            // Scroll-based opacity reduction for intro video
            var initialOpacity = 1; // Match the CSS opacity
            var scrollThreshold = 200; // Pixels to scroll before opacity starts changing
            
            function updateVideoTransform() {
                var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                var progress = Math.min(1, scrollTop / scrollThreshold);
                
                // Calculate opacity
                var opacity = Math.max(0, initialOpacity - progress * initialOpacity);
                
                // Calculate translateY (move up as scroll progresses)
                var translateY = progress * 1; // Move up to 1vw
                
                // Calculate scale (slightly scale down as scroll progresses)
                var scale = 1 - (progress * 0.1); // Scale down to 0.9
                
                // Apply transformations to all videos
                videos.forEach(function(video) {
                    video.style.opacity = opacity;
                    video.style.transform = `translate(-50%, calc(-50% + ${translateY}vw)) scale(${scale})`;
                });
                
                // Apply transformations to all titles
                var titles = Array.from(document.querySelectorAll('.Intro__title'));
                titles.forEach(function(title) {
                    title.style.opacity = opacity;
                    title.style.transform = `translateY(${translateY}vw) scale(${scale})`;
                });
            }
            
            // Add scroll event listener
            window.addEventListener('scroll', updateVideoTransform);
            
            // Initial call to set correct transform
            updateVideoTransform();

            var updateProgressBar = function(video, progressBar, buttonHint) {
                var interval = setInterval(function() {
                    if (video.duration) {
                        var percentage = (video.currentTime / video.duration) * 100;
                        progressBar.style.width = percentage + '%';

                        var currentTimeMinutes = Math.floor(video.currentTime / 60);
                        var currentTimeSeconds = Math.floor(video.currentTime % 60).toString().padStart(2, '0');
                        var durationMinutes = Math.floor(video.duration / 60);
                        var durationSeconds = Math.floor(video.duration % 60).toString().padStart(2, '0');
                        
                        // Update the button hint text
                        //buttonHint.textContent = `${currentTimeMinutes}:${currentTimeSeconds} / ${durationMinutes}:${durationSeconds}`;
                        buttonHint.textContent = `${currentTimeMinutes}:${currentTimeSeconds}`;
                    }
                    if (video.ended) {
                        clearInterval(interval);
                        // Additional logic for video swapping
                    }
                }, 100);
            };

            var playVideo = function(index) {
                var currentVideo = videos[index];
                var currentProgressBar = progressBars[index];
                var buttonHint = currentVideo.parentNode.querySelector('.button__hint');
                
                // Get all title elements and convert to array
                var titles = Array.from(document.querySelectorAll('.Intro__title'));
                
                // Hide all videos, progress bars, and titles
                videos.forEach(function(v, i) {
                    v.style.display = 'none';
                    progressBars[i].style.display = 'none';
                });
                
                titles.forEach(function(title, i) {
                    title.style.display = 'none';
                });

                // Display and play the current video
                currentVideo.style.display = 'block';
                currentProgressBar.style.display = 'block';
                currentVideo.play();
                updateProgressBar(currentVideo, currentProgressBar, buttonHint);
                
                // Show the corresponding title with animation
                if (titles[index]) {
                    var currentTitle = titles[index];
                    var previousTitleIndex = titles.findIndex(t => t.style.display === 'block');
                    var previousTitle = previousTitleIndex >= 0 ? titles[previousTitleIndex] : null;
                    
                    if (previousTitle && previousTitle !== currentTitle) {
                        // Animate title transition
                        animateTitleTransition(previousTitle, currentTitle);
                    } else {
                        // Animate even for first title (animate from empty)
                        animateTitleTransition(null, currentTitle);
                    }
                }
                
                // Setup video ended event listener to play the next video
                currentVideo.addEventListener('ended', function() {
                    var nextIndex = (index + 1) % videos.length; // Loop back to the first video after the last one
                    playVideo(nextIndex); // Play the next video
                }, { once: true }); // Use the { once: true } option to ensure the event listener is removed after execution
            };
            
            // Title animation function (same as hover animation)
            function animateTitleTransition(oldTitle, newTitle) {
                const randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
                let swapsRemaining = 14
                const finalText = newTitle.textContent
                const maxLength = finalText.length
                
                newTitle.classList.add('rolling-animation')
                newTitle.style.display = 'block'
                
                newTitle.animationInterval = setInterval(() => {
                    let currentDisplayText = ''
                    
                    for (let i = 0; i < maxLength; i++) {
                        if (i < swapsRemaining) {
                            const randomChar = randomChars.charAt(Math.floor(Math.random() * randomChars.length))
                            currentDisplayText += randomChar
                        } else {
                            currentDisplayText += finalText[i]
                        }
                    }
                    
                    newTitle.textContent = currentDisplayText
                    swapsRemaining--
                    
                    if (swapsRemaining <= 0) {
                        clearInterval(newTitle.animationInterval)
                        newTitle.textContent = finalText
                        newTitle.classList.remove('rolling-animation')
                        if (oldTitle) {
                            oldTitle.style.display = 'none'
                        }
                    }
                }, 20)
            }

            // Start playing from the first video
            if (videos.length > 0) {
                videos.forEach(function(video) { video.muted = true; }); // Mute all videos
                playVideo(0); // Start with the first video
            }

            // Event listener for the Intro__footer click
            footer.addEventListener('click', function() {
                var overlay = document.querySelector('.Overlay'); // Select the overlay div
                var closeButton = overlay.querySelector('.Button');
                var overlayVideo = overlay.querySelector('video'); 
                var currentVideoIndex = videos.findIndex(v => v.style.display === 'block');
                
                if (currentVideoIndex !== -1) {

                    if (currentVideoIndex === 0) {
                        var video = 'https://cdn.sanity.io/files/7wbnm9gp/production/2ff05777a6058c6d2b01147151ae2e6c92fdd81e.mp4'
                        overlayVideo.src = video;
                        overlayVideo.load(); // Load the video
                        overlayVideo.controls = true; // Show controls
                        overlay.style.display = 'block'; // Show the overlay
                        overlayVideo.play(); // Play the video
                    }

                    if (currentVideoIndex === 1) {
                        var video = 'https://cdn.sanity.io/files/7wbnm9gp/production/868756285b4f31a25fd962b10dc8ca49f7c83778.mp4'
                        overlayVideo.src = video;
                        overlayVideo.load(); // Load the video
                        overlayVideo.controls = true; // Show controls
                        overlay.style.display = 'block'; // Show the overlay
                        overlayVideo.play(); // Play the video
                    }

                    closeButton.addEventListener('click', function() {
                        overlay.style.display = 'none'; // Hide the overlay
                        overlayVideo.pause(); // Optional: pause the video when closing the overlay
                        overlayVideo.currentTime = 0; // Optional: reset video playback to the start
                        // Reset the src to ensure the video is reloaded next time. This is optional and depends on desired behavior.
                        overlayVideo.src = ""; 
                    });
                }
            });

        }
    },
    Intro__image: {
        
        expand: function () {
            this.append('')
            this.css({
                backgroundImage: 'url('+ this.text() +')'
            })
        }
    },
    Intro__logo: {
        
        expand: function () {
            this.append(
                <Logo/>
            )
        }
    },
    
    Intro__video: {
        tag:'video',
        expand: function () {
            this.domAttr('muted', 'true')
            this.domAttr('autoplay', 'true')
            this.domAttr('playsinline', 'true')
            // this.domAttr('loop', 'false')
            this.domAttr('id', 'video')
            
            this.append(
                <source source="{this.text()}"></source>
            )
        }
    },
    Intro__source: {
        tag:'source',
        expand: function () {
            let src = this.param('source')
            this.domAttr('src', src)
            this.domAttr('type', 'video/mp4')      
        }
    },
    Intro__footer: {
        
        expand: function () {
            this.append(
                
            )
        }
    },
})

