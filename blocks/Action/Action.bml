Beast.decl({
    Action: {
        mod: {
            Size: 'M',
            Type: 'Red',
        },
        expand: function () {
            this.append(this.text())

            if (this.param('href')) {
                this.append(
                    <Link href="this.param('href')"> 1 </link>
                )
                
            }
        },
        domInit: function fn() {
            // Initialize shuffle animation for Action component
            if (typeof Shuffle !== 'undefined' && this.element && this.element.textContent) {
                Shuffle.animateLinkHover(
                    this.element, 
                    this.get('href'),
                    { charSet: 'latin' }
                )
            }
            
            // Handle hover effects programmatically
            const element = this.element
            const type = this.param('Type')
            
            if (element) {
                element.addEventListener('mouseenter', function() {
                    if (type === 'Red') {
                        element.style.background = 'red'
                        element.style.borderColor = 'red'
                        element.style.backdropFilter = 'blur(15px)'
                    } else if (type === 'White') {
                        element.style.background = 'rgba(255, 255, 255, 0.9)'
                        element.style.transform = 'scale(1.01)'
                        element.style.backdropFilter = 'blur(12px)'
                    }
                })
                
                element.addEventListener('mouseleave', function() {
                    if (type === 'Red') {
                        element.style.background = 'rgba(255, 255, 255, 0.01)'
                        element.style.borderColor = 'red'
                        element.style.backdropFilter = 'blur(10px)'
                    } else if (type === 'White') {
                        element.style.background = 'white'
                        element.style.transform = 'scale(1)'
                        element.style.backdropFilter = 'none'
                    }
                })
            }
        }       
    }
})


